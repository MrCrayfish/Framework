plugins {
    id 'multiloader-loader'
    id 'fabric-loom' version '1.6-SNAPSHOT'
}

sourceSets {
    testMod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += test.compileClasspath
        runtimeClasspath += test.runtimeClasspath
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    implementation include("com.electronwill.night-config:core:3.6.6")
    implementation include("com.electronwill.night-config:toml:3.6.6")
    implementation include("org.javassist:javassist:3.29.2-GA")
    implementation include("org.reflections:reflections:0.10.2") {
        transitive = false
    }

    testModImplementation sourceSets.main.output
    testModImplementation sourceSets.test.output
}

loom {
    def aw = file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        testModClient {
            inherit client
            setConfigName("Fabric Test Client")
            setSource(sourceSets.testMod)
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
        testServer {
            inherit server
            setConfigName("Fabric Test Server")
            setSource(sourceSets.testMod)
        }
    }
}

jar {
    from(file("LICENSE_Javassist"))
    from(file("LICENSE_Reflections"))
}