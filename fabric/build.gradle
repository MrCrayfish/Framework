plugins {
    id 'multiloader-loader'
    id 'fabric-loom' version '1.6-SNAPSHOT'
}

sourceSets {
    frameworkTest {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += test.compileClasspath
        runtimeClasspath += test.runtimeClasspath
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    library include("com.electronwill.night-config:core:3.6.6")
    library include("com.electronwill.night-config:toml:3.6.6")
    library include("org.javassist:javassist:3.29.2-GA")
    library include("org.reflections:reflections:0.10.2") {
        setTransitive(false)
    }
}

loom {
    def aw = project(":common").file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("runs/client")
            setSource(sourceSets.frameworkTest)
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("runs/server")
            setSource(sourceSets.frameworkTest)
        }
    }
}

jar {
    from(file("LICENSE_Javassist"))
    from(file("LICENSE_Reflections"))
}