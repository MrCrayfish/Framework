import net.minecraftforge.gradle.common.tasks.SignJar
import org.apache.commons.io.FilenameUtils

plugins {
    id 'multiloader-loader'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

minecraft {
    mappings channel: 'official', version: minecraft_version
    copyIdeResources = true

    def at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformer = at
    }

    runs {
        configureEach {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            property 'forge.logging.markers', 'REGISTRIES,SCAN,LOADING'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                framework {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
        def client = client {
            taskName "Client"
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        clientTest {
            parent(client)
            taskName "TestClient"
            ideaModule "${rootProject.name}.${project.name}.test"
            mods {
                framework {
                    source sourceSets.test
                }
            }
        }
        server {
            taskName "Server"
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        data {
            taskName "Data"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

jar.finalizedBy('reobfJar')

tasks.register('signJar', SignJar) {
    dependsOn jar
    onlyIf {
        project.hasProperty('keyStore') || System.getenv("KEYSTORE")
    }
    keyStore = findProperty('keyStore') ?: System.getenv("KEYSTORE")
    alias = findProperty('keyStoreAlias') ?: System.getenv("KEYSTORE_ALIAS")
    storePass = findProperty('keyStorePass') ?: System.getenv("KEYSTORE_PASS")
    inputFile = jar.archiveFile
    def name = FilenameUtils.removeExtension(jar.archiveFile.get().getAsFile().getName());
    outputFile = layout.buildDirectory.file("libs/%s-signed.jar".formatted(name));
}

jar.finalizedBy 'signJar'
signJar.mustRunAfter 'reobfJar'

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

// Fixes forge appending "_mapped_" in POM
fg.component(publishing.publications.named("mavenJava").get() as MavenPublication)
